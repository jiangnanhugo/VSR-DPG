{
   "task" : {

      // Metric to be used for the reward function. See regression.py for
      // supported metrics.
      "metric" : "inv_nrmse",
      "metric_params" : [1.0],

      // NRMSE threshold for early stopping. This is useful for noiseless
      // benchmark problems when DSO discovers the true solution.
      "threshold" : 1e-12,

      // With protected=false, floating-point errors (e.g. log of negative
      // number) will simply returns a minimal reward. With protected=true,
      // "protected" functions will prevent floating-point errors, but may
      // introduce discontinuities in the learned functions.      
      "protected" : false,
      "normalize_variance" : false
   },
   
   // Hyperparameters related to genetic programming hybrid methods.
   "gp_meld" : {
      "run_gp_meld" : false,
      "verbose" : false,
      // How many GP generations to run between each RNN step. 
      "generations" : 20,
      "p_crossover" : 0.5,
      "p_mutate" : 0.5,
      "tournament_size" : 5,
      "train_n" : 50,
      "mutate_tree_max" : 3
   },

   // Only the key training hyperparameters are listed here. See
   // config_common.json for the full list.
   "training" : {
      "n_epochs": 200,
      "batch_size" : 20,
      "epsilon" : 0.02,
      // <R> is the sample average _after_ epsilon sub-sampling and  R_e is the (1-epsilon)-quantile estimate.
      // (1) "ewma_R" : b = EWMA(<R>) (2) "R_e" : b = R_e (3) "ewma_R_e" : b = EWMA(R_e) (4) "combined" : b = R_e + EWMA(<R> - R_e)
      "baseline" : "R_e",
      // Recommended to set this to as many cores as you can use! Especially if
      // using the "const" token.
      "n_cores_batch" : 1,
      "save_all_epoch": true,
      "save_freq": 5
   },

   // Only the key RNN controller hyperparameters are listed here. See
   // config_common.json for the full list.
   "controller" : {
      "learning_rate": 0.0025,
      "entropy_weight" : 0.03,
      "entropy_gamma" : 0.7,
      // Priority queue training hyperparameters.
      "pqt" : false,                            //Train with priority queue training (PQT)?
      "pqt_k" : 10,
      "pqt_batch_size" : 1,
      "pqt_weight" : 200.0,
      "pqt_use_pg" : false
   },
   // Experiment configuration.
    "experiment" : {

       // Root directory to save results.
       "logdir" : "./log",

       // Random number seed. Don't forget to change this for multiple runs!
       "seed" : 0
    },

   // Hyperparameters related to including in situ priors and constraints. Each
   // prior must explicitly be turned "on" or it will not be used. See
   // config_common.json for descriptions of each prior.
   "prior": {
      // Memory sanity value. Limit strings to size 256
      // This can be set very high, but it runs slower.
      // Max value is 1000. 
      "length" : {
         "min_" : 4,
         "max_" : 256,
         "on" : true
      },
      // Memory sanity value. Have at most 10 optimizable constants. 
      // This can be set very high, but it runs rather slow. 
      "repeat" : {
         "tokens" : "const",
         "min_" : null,
         "max_" : 10,
         "on" : true
      },
      "inverse" : {
         "on" : true
      },
      "trig" : {
         "on" : true
      },
      "const" : {
         "on" : true
      },
      "no_inputs" : {
         "on" : true
      },
      "uniform_arity" : {
         "on" : false
      },
      "soft_length" : {
         "loc" : 10,
         "scale" : 5,
         "on" : true
      }
   }
}
